/*
 * Copyright 2015-2017 EntIT Software LLC, a Micro Focus company.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.cafdataprocessing.processing.service.tests;

import com.github.cafdataprocessing.processing.service.client.ApiClient;
import com.github.cafdataprocessing.processing.service.client.ApiException;
import com.github.cafdataprocessing.processing.service.client.api.TenantConfigurationApi;
import com.github.cafdataprocessing.processing.service.client.model.EffectiveTenantConfigValue;
import com.github.cafdataprocessing.processing.service.client.model.EffectiveTenantConfigValue.ValueTypeEnum;
import com.github.cafdataprocessing.processing.service.client.model.EffectiveTenantConfigs;
import com.github.cafdataprocessing.processing.service.client.model.GlobalConfigsEntry;
import com.github.cafdataprocessing.processing.service.client.model.TenantConfig;
import com.github.cafdataprocessing.processing.service.client.model.TenantConfigs;
import com.github.cafdataprocessing.processing.service.client.api.GlobalConfigApi;
import com.github.cafdataprocessing.processing.service.client.model.GlobalConfig;
import com.github.cafdataprocessing.processing.service.tests.utils.ApiClientProvider;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.Test;

public class TenantConfigIT
{
    public static final ApiClient API_CLIENT = ApiClientProvider.getApiClient();
    public static final TenantConfigurationApi TENANTS_API = new TenantConfigurationApi(API_CLIENT);
    private static final String TEST_DESCRIPTION_PREFIX = "test_description_";
    private static final String TEST_DESCRIPTION_1 = TEST_DESCRIPTION_PREFIX + "1";
    private static final String TEST_SCOPE = "TENANT";
    private static final GlobalConfigApi GLOBAL_CONFIG_API = new GlobalConfigApi(API_CLIENT);

    @AfterMethod
    public void cleanUp() throws ApiException
    {
        //delete all records after tests
        for (final GlobalConfigsEntry config : GLOBAL_CONFIG_API.getGlobalConfigs()) {
            GLOBAL_CONFIG_API.deleteGlobalConfig(config.getKey());
        }
    }

    @Test(description = "This test verifies that the autogenerated client can make a call through the api to create a tenant specific "
        + "configuration")
    public void creationAndRetrievalOfTenantConfig() throws ApiException
    {
        final String tenantId = "1";
        final String configKey = "ee.grammarMap";
        final String configValue = "{\"pii.xml\": []}";
        createConfigInStore(configKey, "SomeValue", "Some description of the config for testing");
        TENANTS_API.setTenantConfig(tenantId, configKey, configValue);
        final String tenantConfigValue = TENANTS_API.getTenantConfig(tenantId, configKey);
        Assert.assertEquals(configValue, tenantConfigValue,
                            "Expecting tenant config value returned to match that which was provided during the set");

        //Clean up
        TENANTS_API.deleteTenantConfigs(tenantId);
        Assert.assertTrue(TENANTS_API.getTenantConfigs(tenantId).isEmpty());
    }

    @Test(description = "This test verifies that the autogenerated client can make a call through the api to create a tenant specific "
        + "configuration and then update that same configuration with a new value.")
    public void updateAndRetrievalOfTenantConfig() throws ApiException
    {
        final String tenantId = "1";
        final String configKey = "ee.grammarMap";
        final String firstConfigValue = "{\"pii.xml\": []}";
        final String secondConfigValue = "{'pii.xml': ['internet.ecr']}";

        createConfigInStore(configKey, "SomeValue", "Some description of the config for testing");

        TENANTS_API.setTenantConfig(tenantId, configKey, firstConfigValue);
        final String tenantConfigValue = TENANTS_API.getTenantConfig(tenantId, configKey);
        Assert.assertEquals(tenantConfigValue, firstConfigValue, "Asserting first tenant config value was set correctly");

        TENANTS_API.setTenantConfig(tenantId, configKey, secondConfigValue);
        final String secondTenantConfigValue = TENANTS_API.getTenantConfig(tenantId, configKey);
        Assert.assertEquals(secondTenantConfigValue, secondConfigValue,
                            "Asserting first tenant config value was updated correctly");

        //Clean up
        TENANTS_API.deleteTenantConfigs(tenantId);
        Assert.assertTrue(TENANTS_API.getTenantConfigs(tenantId).isEmpty());
    }

    @Test(description = "This test verifies that the autogenerated client can make a call through the api to create multiple tenant "
        + "specific configurations and then verifies the get configurations call returns the same configurations.")
    public void bulkCreationAndRetrievalOfTenantConfig() throws ApiException
    {
        final TenantConfigs tenantConfigs = new TenantConfigs();
        final String tenantId = "1";
        final String configKey = "ee.grammarMap";
        final String configValue = "{\"pii.xml\": []}";
        for (int i = 0; i < 5; i++) {
            final TenantConfig config = new TenantConfig();
            final String key = configKey + i;
            config.setKey(key);
            config.setValue(configValue + i);
            tenantConfigs.add(config);
            createConfigInStore(key, "SomeValue", "Some description of the config for testing");
        }
        TENANTS_API.setTenantConfigs(tenantId, tenantConfigs);
        final TenantConfigs returnedTenantConfigs = TENANTS_API.getTenantConfigs(tenantId);

        tenantConfigs.forEach((config) -> {
            Assert.assertTrue(returnedTenantConfigs.contains(config));
        });

        //Clean up
        TENANTS_API.deleteTenantConfigs(tenantId);
        Assert.assertTrue(TENANTS_API.getTenantConfigs(tenantId).isEmpty());
    }

    @Test(description = "Verifies that the effective config call will return the effective config for a config that is not set.")
    public void effectiveConfig() throws ApiException
    {
        final String tenantId = "DefaultCheck";
        final String configKey = "ee.grammarMap";
        final String globalConfigValue = "{\"pii.xml\": []}";

        createConfigInStore(configKey, globalConfigValue, "Some description of the config for testing");

        final EffectiveTenantConfigValue configValue = TENANTS_API.getEffectiveTenantConfig(tenantId, configKey);

        Assert.assertTrue(configValue.getValueType().equals(ValueTypeEnum.DEFAULT));
        Assert.assertEquals(configValue.getValue(), globalConfigValue);

    }

    @Test(description = "This test verifies that the autogenerated client can make a call through the api to create a tenant specific "
        + "configuration and then delete that same configuration. This test will also verify that the get effective config call will "
        + "return the tenant specific value if set but if it isn't that it will return the default.")
    public void deleteOfTenantConfig() throws ApiException
    {
        final String tenantId = "1";
        final String configKey = "ee.grammarMap";
        final String configValue = "SomeTestValue";
        createConfigInStore(configKey, configValue, "Some description of the config for testing");
        TENANTS_API.setTenantConfig(tenantId, configKey, configValue);
        final EffectiveTenantConfigValue tenantConfigValue = TENANTS_API.getEffectiveTenantConfig(tenantId, configKey);
        Assert.assertEquals(tenantConfigValue.getValue(), configValue);
        Assert.assertEquals(tenantConfigValue.getValueType(), ValueTypeEnum.CUSTOM);

        TENANTS_API.deleteTenantConfig(tenantId, configKey);
        Assert.assertTrue(TENANTS_API.getTenantConfigs(tenantId).isEmpty());
    }

    @Test(description = "Tests that a tenant specific config cannot be created when there is no corresponding global config")
    public void createTenantConfigWithNoCorrespondingGlobalConfig()
    {
        final String tenantId = "1";
        final String configKey = "ee.grammarMap";
        final String configValue = "{\"pii.xml\": []}";

        try {
            TENANTS_API.setTenantConfig(tenantId, configKey, configValue);
        } catch (final ApiException ex) {
            Assert.assertEquals(ex.getCode(), 404);
        }
    }

    @Test(description = "Tests that the effective configs are returned for a user even though no tenant specific config was created.")
    public void getEffectiveConfigs() throws ApiException
    {
        final String tenantId = "EffectiveConfigTest";
        final String configKey = "ee.grammarMap";
        final String configValue = "{\"pii.xml\": []}";
        createConfigInStore(configKey, configValue, "Some description of the config for testing");

        final EffectiveTenantConfigs configs = TENANTS_API.getEffectiveTenantConfigs(tenantId);
        Assert.assertFalse(configs.isEmpty());
    }

    @Test(description = "Tests that the effective configs are returned for a user along side their tenant specific configs.")
    public void getEffectiveConfigList() throws ApiException
    {
        final String tenantId = "EffectiveConfigTest";
        final String configKey = "ee.grammarMap";
        final String configValue = "{\"pii.xml\": []}";
        final String secondConfigKey = "AnotherTestConfig";
        final String secondConfigValue = "AnotherTestConfigValue";
        createConfigInStore(configKey, configValue, "Some description of the config for testing");
        createConfigInStore(secondConfigKey, configValue, "Some description of the config for testing");

        TENANTS_API.setTenantConfig(tenantId, secondConfigKey, secondConfigValue);

        final EffectiveTenantConfigs configs = TENANTS_API.getEffectiveTenantConfigs(tenantId);
        Assert.assertFalse(configs.isEmpty());

        configs.forEach((config) -> {
            if (config.getKey().equals(configKey)) {
                Assert.assertEquals(config.getValue(), configValue);
                Assert.assertEquals(config.getValueType(), ValueTypeEnum.DEFAULT);
            } else {
                Assert.assertEquals(config.getValue(), secondConfigValue);
                Assert.assertEquals(config.getValueType(), ValueTypeEnum.CUSTOM);
            }
        });
        TENANTS_API.deleteTenantConfig(tenantId, secondConfigKey);
        Assert.assertTrue(TENANTS_API.getTenantConfigs(tenantId).isEmpty());
    }

    @Test(description = "Tests that an invalid param triggers a 400 response.")
    public void testInvalidParams() throws ApiException
    {
        final String configKey = "ee.grammarMap";
        final String configValue = "{\"pii.xml\": []}";
        createConfigInStore(configKey, configValue, "Some description of the config for testing");

        String tenantId = "";
        for (int i = 0; i < 260; i++) {
            tenantId = tenantId + i;
        }

        try {
            TENANTS_API.getEffectiveTenantConfigs(tenantId);
        } catch (final ApiException ex) {
            Assert.assertTrue(ex.getCode() == 400);
        }
    }

    private void createConfigInStore(final String key, final String value, final String description) throws ApiException
    {
        GLOBAL_CONFIG_API.setGlobalConfig(key, buildGlobalConfig(value, description));
    }

    private GlobalConfig buildGlobalConfig(String value, String descrtiption)
    {
        final GlobalConfig config = new GlobalConfig();
        config.setDefault(value);
        config.setDescription(descrtiption);
        config.setScope(TEST_SCOPE);
        return config;
    }
}
