#
# Copyright 2015-2017 Hewlett Packard Enterprise Development LP.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#THIS CONTRACT BELONG TO THE CLASSIFICATION-SERVICE PROJECT AND SHOULD NOT BE EDITED HERE. CHANGES REQUIRED SHOULD BE MADE TO THE CLASSIFICATION-SERVICE PROJECT AND THE CHANGED CONTRACT COPIED HERE.

swagger: "2.0"
info:
  title: "Classification Service API"
  version: "1.2.0"
  description: |
    The Classification API allows for the creation of sets of criteria representing groups of data (Classifications) and pipelines defining lists of these groups to compare data against (Workflows containing Classification Rules).
# basePath prefixes all resource paths 
basePath: /classification/v1
# 
tags:
  - name: Admin
    description: Administrative operations.
  - name: Classifications
    description: Classification operations. A Classification is a set of criteria representing a concept e.g. Travel Documents.
  - name: Classification Rules
    description: Classification Rule operations. A Rule represents a set of Classifications and additional criteria that must be met for an item to be Classified as a match.
  - name: Rule Classifications
    description: Rule Classification operations. Represents a Classification added to a Classification Rule. May be modified independent of the referred to Classification.
  - name: Rule Conditions
    description: Rule Condition operations. Criteria that may be set on a Classification Rule that must be met before any Classifications on the Rule may be considered matches.
  - name: Terms
    description: Term operations. Terms specify phrases or patterns that should be matched and are grouped under a Term List. Term Lists can be referred to in Classifications.
  - name: Workflows
    description: Workflow operations. A Workflow represents a set of Classification Rules.
schemes:
  - http
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
#
parameters:
  project_id:
    name: project_id
    in: header
    type: string
    description: |
      Identifies the tenant making the request.
    required: true
paths:
  ##########################
  ##  ADMIN
  ##########################
  /healthcheck/:
    x-swagger-router-controller: admin
    get:
      tags:
        - Admin
      summary: Check if the service is healthy.
      description: Returns the current health of the service.
      operationId: healthCheck
      responses:
        200:
          description: |
            Returns a status of healthy if all components the service depends on are contactable. A 200 response also implies the service itself is running.
          schema:
            $ref: "#/definitions/healthStatus"
  ##########################
  ###  CLASSIFICATIONS
  ##########################
  /classifications:
    x-swagger-router-controller: classifications
    parameters:
      - $ref: '#/parameters/project_id'
    get:
      tags:
        - Classifications
      summary: Get Classifications.
      description: Returns all Classifications for the tenant.
      operationId: getClassifications
      parameters:
      - name: pageNum
        in: query
        type: integer
        default: 1
        description: Optional. The page number to return results from. Defaults to 1.
      - name: pageSize
        in: query
        type: integer
        default: 100
        minimum: 1
        description: Optional. The maximum number of results to return. Defaults to 100.
      responses:
        200:
          description: |
            Returns the list of Classifications for
            the tenant identified by project_id.
          schema:
            $ref: "#/definitions/existingClassifications"
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
    #
    post:
      tags:
        - Classifications
      summary: Creates a Classification.
      description: |
        Creates a Classification which can contain Rules.
      operationId: createClassification
      parameters:
        - name: newClassification
          description: The definition of the new Classification to create.
          in: body
          required: true
          schema:
            $ref: '#/definitions/baseClassification'
      responses:
        201:
          description: Indicates that the Classification was successfully created.
          schema:
            $ref: '#/definitions/existingClassification'
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
  /classifications/{id}:
    x-swagger-router-controller: classifications
    parameters:
      - $ref: '#/parameters/project_id'
      - name: id
        in: path
        type: integer
        format: int64
        description: The ID of the Classification to perform action on.
        required: true  
    get:
      tags:
        - Classifications
      summary: Get a Classification.
      description: |
        Retrieves a Classification based on ID passed.
      operationId: getClassification
      responses:
        200:
          description: |
            Returns the detail of the Classification requested.
          schema:
            $ref: "#/definitions/existingClassification"
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Classification was not found.
          schema:
            $ref: "#/definitions/errorMessage"
    delete:
      tags:
        - Classifications
      summary: Deletes a Classification.
      description: |
        Deletes the specified Classification.
      operationId: deleteClassification
      responses:
        204:
          description: Indicates that the Classification was successfully deleted.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Classification could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    put:
      tags:
        - Classifications
      summary: Updates a Classification.
      description: |
        Updates the specified Classification.
      operationId: updateClassification
      parameters:
        - name: updatedClassification
          description: The definition of the updated Classification.
          in: body
          required: true
          schema:
            $ref: '#/definitions/baseClassification'
      responses:
        204:
          description: Indicates that the Classification was successfully updated.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Classification could not be found.
          schema:
            $ref: "#/definitions/errorMessage" 
  ##########################
  ##  RULE CLASSIFICATIONS
  ##########################
  /workflows/{workflowId}/rules/{classificationRuleId}/classifications:
    x-swagger-router-controller: ruleClassifications
    parameters:
      - $ref: '#/parameters/project_id'
      - name: workflowId
        in: path
        type: integer
        format: int64
        description: The ID of the Workflow to use.
        required: true
      - name: classificationRuleId
        in: path
        type: integer
        format: int64
        description: The ID of the Classification Rule to use.
        required: true
    get:
      tags:
        - Rule Classifications
      parameters:
        - name: pageNum
          in: query
          type: integer
          default: 1
          description: Optional. The page number to return results from. Defaults to 1.
        - name: pageSize
          in: query
          type: integer
          default: 100
          description: Optional. The maximum number of results to return. Defaults to 100.
      summary: Get Rule Classifications.
      description: Returns all Classifications on a Classification Rule.
      operationId: getRuleClassifications
      responses:
        200:
          description: |
            Returns the list of Rule Classifications for the specified Rule.
          schema:
            $ref: "#/definitions/existingRuleClassifications"
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
    #
    post:
      tags:
        - Rule Classifications
      summary: Creates a Rule Classification.
      description: |
        Creates a Rule Classification under the specified Rule.
      operationId: createRuleClassification
      parameters:
        - name: newRuleClassification
          description: The definition of the new Rule Classification to create.
          in: body
          required: true
          schema:
            $ref: '#/definitions/baseRuleClassification'
      responses:
        201:
          description: Indicates that the Rule Classification was successfully created.
          schema:
            $ref: '#/definitions/existingRuleClassification'
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
    #
    delete:
      tags:
        - Rule Classifications
      summary: Remove Rule Classifications.
      description: |
        Removes all Rule Classifications from specified Classification Rule.
      operationId: deleteRuleClassifications
      responses:
        204:
          description: Indicates that the Rule Classifications were successfully deleted.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
  /workflows/{workflowId}/rules/{classificationRuleId}/classifications/{id}:
    x-swagger-router-controller: ruleClassifications
    parameters:
      - $ref: '#/parameters/project_id'
      - name: workflowId
        in: path
        type: integer
        format: int64
        description: The ID of the Workflow to use.
        required: true
      - name: classificationRuleId
        in: path
        type: integer
        format: int64
        description: The ID of the Classification Rule to use.
        required: true
      - name: id
        in: path
        type: integer
        format: int64
        description: The ID of the Rule Classification to perform operation on.
        required: true
    get:
      tags:
        - Rule Classifications
      summary: Get a Rule Classification.
      description: Retrieves a Rule Classification with the matching ID.
      operationId: getRuleClassification
      responses: 
        200:
          description: |
            Returns the Rule Classification identified by the ID.
          schema:
            $ref: '#/definitions/existingRuleClassification'
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Rule Classification could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    delete:
      tags:
        - Rule Classifications
      summary: Deletes the specified Rule Classification. 
      description: |
        Delete a Rule Classification.
      operationId: deleteRuleClassification
      responses:
        204:
          description: Indicates that the Rule Classification was successfully deleted.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Rule Classification could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    put:
      tags:
        - Rule Classifications
      summary: Update a Rule Classification.
      description: Update a Rule Classification with the matching ID.
      operationId: updateRuleClassification
      parameters:
        - name: updatedRuleClassification
          in: body
          description: The new definition for the Rule Classification.
          required: true
          schema:
            $ref: '#/definitions/baseRuleClassification'
      responses:
        204:
          description: Indicates Rule Classification updated successfully.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Rule Classification could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
  ##########################
  ##  CLASSIFICATION RULE CONDITIONS
  ##########################
  /workflows/{workflowId}/rules/{ruleId}/conditions:
    x-swagger-router-controller: classificationRuleConditions
    parameters:
      - $ref: '#/parameters/project_id'
      - name: workflowId
        in: path
        type: integer
        format: int64
        description: The ID of the Workflow the Classification Rule is part of.
        required: true
      - name: ruleId
        in: path
        type: integer
        format: int64
        description: The ID of the Classification Rule to use in operations.
        required: true
    get:
      tags:
        - Rule Conditions
      parameters:
        - name: pageNum
          in: query
          type: integer
          default: 1
          description: Optional. The page number to return results from. Defaults to 1.
        - name: pageSize
          in: query
          type: integer
          default: 100
          description: Optional. The maximum number of results to return. Defaults to 100.
      summary: Get Rule Conditions.
      description: Returns all Conditions on a Classification Rule.
      operationId: getClassificationRuleConditions
      responses:
        200:
          description: |
            Returns the list of Conditions for the specified Rule.
          schema:
            $ref: "#/definitions/existingConditions"
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
    post:
      tags:
        - Rule Conditions
      summary: Create a Rule Condition.
      description: Creates a Condition with the provided information under the specified Classification Rule.
      operationId: createClassificationRuleCondition
      parameters:
        - name: newCondition
          description: The definition of the Condition to create.
          in: body
          required: true
          schema:
            $ref: '#/definitions/condition'
      responses:
        201:
          description: Indicates that the Condition was successfully created and added to the Classification Rule.
          schema:
            $ref: '#/definitions/existingCondition'
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
  #
  /workflows/{workflowId}/rules/{ruleId}/conditions/{conditionId}:
    x-swagger-router-controller: classificationRuleConditions
    parameters:
      - $ref: '#/parameters/project_id'
      - name: workflowId
        in: path
        type: integer
        format: int64
        description: The ID of the Workflow the Classification Rule is part of.
        required: true
      - name: ruleId
        in: path
        type: integer
        format: int64
        description: The ID of the Classification Rule the condition is part of.
        required: true
      - name: conditionId
        in: path
        type: integer
        format: int64
        description: The ID of the Condition to perform operation on.
        required: true
    get:
      tags:
        - Rule Conditions
      summary: Get a Rule Condition.
      description: Retrieves a Classification Rule Condition with the matching ID.
      operationId: getClassificationRuleCondition
      responses: 
        200:
          description: |
            Returns the Classification Rule Condition identified by the ID.
          schema:
            $ref: '#/definitions/existingCondition'
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Rule Condition could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    delete:
      tags:
        - Rule Conditions
      summary: Deletes the specified Rule Condition. 
      description: |
        Delete a Classification Rule Condition.
      operationId: deleteClassificationRuleCondition
      responses:
        204:
          description: Indicates that the Classification Rule Condition was successfully deleted.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Classification Rule Condition could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    put:
      tags:
        - Rule Conditions
      summary: Update a Rule Condition.
      description: Update a Classification Rule Condition with the matching ID.
      operationId: updateClassificationRuleCondition
      parameters:
        - name: updatedRuleCondition
          in: body
          description: The new definition for the Rule Condition.
          required: true
          schema:
            $ref: '#/definitions/condition'
      responses:
        204:
          description: Indicates Rule Condition updated successfully.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Rule Condition could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
  
  ##########################
  ###  CLASSIFICATION RULES
  ##########################
  /workflows/{workflowId}/rules/:
    x-swagger-router-controller: classificationRules
    parameters:
      - $ref: '#/parameters/project_id'
      - name: workflowId
        in: path
        type: integer
        format: int64
        description: The ID of the Workflow to use.
        required: true
    get:
      tags:
        - Classification Rules
      summary: Get Classification Rules.
      description: Returns all Classification Rules in the specified Workflow for the tenant.
      operationId: getClassificationRules
      parameters:
        - name: pageNum
          in: query
          type: integer
          default: 1
          description: Optional. The page number to return results from. Defaults to 1.
        - name: pageSize
          in: query
          type: integer
          default: 100
          description: Optional. The maximum number of results to return. Defaults to 100.
      responses:
        200:
          description: |
            Returns the list of processing rules for
            the tenant identified by project_id.
          schema:
            $ref: "#/definitions/classificationRules"
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Workflow could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    post:
      tags: 
        - Classification Rules
      summary: Creates a Classification Rule.
      description: |
        Creates a Classification Rule using the Rule definition passed under the specified Workflow.
      operationId: createClassificationRule
      parameters:
        - name: newRule
          description: The definition of the Classification Rule to create. If no priority is provided it will default to one more than the highest priority Rule in the Workflow.
          in: body
          required: true
          schema:
            $ref: '#/definitions/baseClassificationRule'
      responses:
        201:
          description: Indicates that the Rule was successfully created.
          schema:
            $ref: '#/definitions/existingClassificationRule'
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
    #
  /workflows/{workflowId}/rules/{id}:
    x-swagger-router-controller: classificationRules
    parameters:
      - $ref: '#/parameters/project_id'
      - name: workflowId
        in: path
        type: integer
        format: int64
        description: The ID of the Workflow the Classification Rule is part of.
        required: true
      - name: id
        in: path
        type: integer
        format: int64
        description: The ID of the Classification Rule to perform operation on.
        required: true
    get:
      tags:
        - Classification Rules
      summary: Get the specified Classification Rule.
      description: |
        Returns the Classification Rule with the matching ID that was passed in for the tenant identified by project_id.
      operationId: getClassificationRule
      responses:
        200:
          description: |
            Returns the detail of the Classification Rule requested.
          schema:
            $ref: "#/definitions/existingClassificationRule"
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Classification Rule was not found.
          schema:
            $ref: "#/definitions/errorMessage"
    put:
      tags:
        - Classification Rules
      summary: Update a Classification Rule
      description: |
        Updates the specified Classification Rule using the data passed in the request.
      operationId: updateClassificationRule
      parameters:
        - name: updatedRule
          in: body
          required: true
          schema:
            $ref: '#/definitions/baseClassificationRule'
      responses:
        204:
          description: Classification Rule was successfully updated.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Classification Rule is not found.
          schema:
            $ref: "#/definitions/errorMessage"
    delete:
      tags:
        - Classification Rules
      summary: Deletes the specified Classification Rule 
      description: |
        Delete a Classification Rule and remove it from any Workflows it is part of.
      operationId: deleteClassificationRule
      responses:
        204:
          description: Indicates that the Classification Rule was successfully deleted.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Classification Rule could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    #
  ##########################
  ##  TERM LISTS
  ##########################
  /termlists/:
    x-swagger-router-controller: termLists
    parameters:
      - $ref: '#/parameters/project_id'
    post:
      tags:
        - Terms
      summary: Create Term List
      description: Creates a new Term List.
      operationId: createTermList
      parameters:
        - name: newTermList
          description: The definition of the new Term List to create.
          in: body
          required: true
          schema:
            $ref: '#/definitions/baseTermList'
      responses:
        201:
          description: Indicates that the Term List was successfully created.
          schema:
            $ref: '#/definitions/existingTermList'
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
    get:
      tags:
        - Terms
      summary: Get Term Lists
      description: Returns all Term Lists for a tenant.
      operationId: getTermLists
      parameters:
        - name: pageNum
          in: query
          type: integer
          default: 1
          description: Optional. The page number to return results from. Defaults to 1.
        - name: pageSize
          in: query
          type: integer
          default: 100
          description: Optional. The maximum number of results to return. Defaults to 100.
      responses:
        200:
          description: |
            Returns the Term Lists for
            the tenant.
          schema:
            $ref: "#/definitions/existingTermLists"
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
  /termlists/{id}:
    x-swagger-router-controller: termLists
    parameters:
      - $ref: '#/parameters/project_id'
      - name: id
        in: path
        type: integer
        format: int64
        description: The ID of the Term List to perform action on.
        required: true
    get:
      tags:
        - Terms
      summary: Get a Term List.
      description: |
        Retrieves a Term List based on ID passed.
      operationId: getTermList
      responses:
        200:
          description: |
            Returns the detail of the Term List requested.
          schema:
            $ref: "#/definitions/existingTermList"
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Term List is not found.
          schema:
            $ref: "#/definitions/errorMessage"
    put:
      tags:
        - Terms
      summary: Updates a Term List.
      description: |
        Updates the specified Term List.
      operationId: updateTermList
      parameters:
        - name: updatedTermList
          description: The definition of the updated Term List.
          in: body
          required: true
          schema:
            $ref: '#/definitions/baseTermList'
      responses:
        204:
          description: Indicates that the Term List was successfully updated.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Term List could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    delete:
      tags:
        - Terms
      summary: Deletes a Term List.
      description: |
        Deletes the specified Term List.
      operationId: deleteTermList
      responses:
        204:
          description: Indicates that the Term List was successfully deleted.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Term List could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
  ###########################
  ###  TERMS
  ###########################
  /termlists/{termListId}/terms/:
    x-swagger-router-controller: terms
    parameters:
      - $ref: '#/parameters/project_id'
      - name: termListId
        in: path
        type: integer
        format: int64
        description: The ID of the Term List to perform action on.
        required: true
    get:
      tags:
        - Terms
      summary: Get Terms on Term List.
      description: |
        Retrieves the Terms for a Term List based on ID passed.
      operationId: getTerms
      parameters:
        - name: pageNum
          in: query
          type: integer
          default: 1
          description: Optional. The page number to return results from. Defaults to 1.
        - name: pageSize
          in: query
          type: integer
          default: 100
          description: Optional. The maximum number of results to return. Defaults to 100.
      responses:
        200:
          description: |
            Returns the Terms on the Term List.
          schema:
            $ref: "#/definitions/existingTerms"
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
    put:
      tags:
        - Terms
      summary: Updates a Term List with the specified Terms.
      description: |
        Updates the specified Term List with the Terms passed. Can be set to either add or overwrite current Terms.
      operationId: updateTerms
      parameters:
        - name: terms
          description: The Terms to update the Term List with.
          in: body
          required: true
          schema:
            $ref: '#/definitions/newTerms'        
      responses:
        204:
          description: Indicates that the Term List was successfully updated with the Terms.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Term List could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    delete:
      tags:
        - Terms
      summary: Removes Terms from Term List.
      description: |
        Removes the specified Terms from the Term List and deletes them. If no Term IDs are passed then all terms are removed from the Term List.
      operationId: deleteTerms
      parameters:
        - name: termIds
          description: The IDs of Terms to remove from the Term List. If empty or not specified, all Terms are removed from the Term List.
          in: body
          schema:
            $ref: '#/definitions/termIds' 
      responses:
        204:
          description: Indicates that the Terms were successfully removed.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Term List or Term IDs could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
  /termlists/{termListId}/terms/{id}:
    x-swagger-router-controller: terms
    parameters:
      - $ref: '#/parameters/project_id'
      - name: termListId
        in: path
        type: integer
        format: int64
        description: The ID of the Term List to perform action on.
        required: true
      - name: id
        in: path
        type: integer
        format: int64
        description: The ID of the Term List to perform action on.
        required: true
    get:
      tags:
        - Terms
      summary: Gets a Term.
      description: Retrieves a Term with the matching ID.
      operationId: getTerm
      responses: 
        200:
          description: |
            Returns the Term identified by the ID.
          schema:
            $ref: '#/definitions/existingTerm'
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Term could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    put:
      tags:
        - Terms
      summary: Updates a Term.
      description: Updates a Term with the matching ID.
      operationId: updateTerm
      parameters:
        - name: updatedTerm
          in: body
          description: The new definition for the Term.
          required: true
          schema:
            $ref: '#/definitions/baseTerm'
      responses: 
        204:
          description: Indicates Term updated successfully.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Term or Term List could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    delete:
      tags:
        - Terms
      summary: Deletes a Term.
      description: |
        Deletes a specified Term, also removing it from the Term List.
      operationId: deleteTerm
      responses:
        204:
          description: Indicates that the Terms was deleted.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Term List or Term ID could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
  #
  ##########################
  ##  WORKFLOWS
  ##########################
  /workflows:
    x-swagger-router-controller: workflow
    parameters:
      - $ref: '#/parameters/project_id'
    get:
      tags:
        - Workflows
      summary: Get Workflows.
      description: Returns all Workflows for the tenant.
      operationId: getWorkflows
      parameters:
      - name: pageNum
        in: query
        type: integer
        default: 1
        description: Optional. The page number to return results from. Defaults to 1.
      - name: pageSize
        in: query
        type: integer
        default: 100
        description: Optional. The maximum number of results to return. Defaults to 100.
      responses:
        200:
          description: |
            Returns the list of Workflows for
            the tenant identified by project_id.
          schema:
            $ref: "#/definitions/existingWorkflows"
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
    post:
      tags:
        - Workflows
      summary: Creates a Workflow.
      description: |
        Creates a Workflow which can contain Classification Rules.
      operationId: createWorkflow
      parameters:
        - name: newWorkflow
          description: The definition of the new Workflow to create.
          in: body
          required: true
          schema:
            $ref: '#/definitions/baseWorkflow'
      responses:
        201:
          description: Indicates that the Workflow was successfully created.
          schema:
            $ref: '#/definitions/existingWorkflow'
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
  /workflows/{id}:
    x-swagger-router-controller: workflow
    parameters:
      - $ref: '#/parameters/project_id'
      - name: id
        in: path
        type: integer
        format: int64
        description: The ID of the Workflow to perform action on.
        required: true    
    get:
      tags:
        - Workflows
      summary: Get a Workflow.
      description: |
        Retrieves a Workflow based on ID passed.
      operationId: getWorkflow
      responses:
        200:
          description: |
            Returns the detail of the Workflow requested.
          schema:
            $ref: "#/definitions/existingWorkflow"
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Workflow is not found.
          schema:
            $ref: "#/definitions/errorMessage"
    delete:
      tags:
        - Workflows
      summary: Deletes a Workflow.
      description: |
        Deletes the specified Workflow.
      operationId: deleteWorkflow
      responses:
        204:
          description: Indicates that the Workflow was successfully deleted.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Workflow could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    put:
      tags:
        - Workflows
      summary: Updates a Workflow.
      description: |
        Updates the specified Workflow.
      operationId: updateWorkflow
      parameters:
        - name: updatedWorkflow
          description: The definition of the updated Workflow.
          in: body
          required: true
          schema:
            $ref: '#/definitions/baseWorkflow'
      responses:
        204:
          description: Indicates that the Workflow was successfully updated.
        400:
          description: Indicates request sent was invalid.
          schema:
            $ref: "#/definitions/errorMessage"
        404:
          description: The specified Workflow could not be found.
          schema:
            $ref: "#/definitions/errorMessage"
    
definitions:
  ##########################
  ## ERRORS
  ##########################
  errorMessage:
    type: object
    example: {message: "Description of error that occurred."}
    properties:
      error:
        type: integer
        description: Specific error code.
      message:
        type: string
        description: Summary of the problem.
      correlation_code:
        type: string
        description: Code used to group multiple log entries for a request.
      reason:
        type: string
        description: The cause of the error.
  #
  ###########################
  ## ADMIN
  ###########################
  healthStatus:
    type: object
    required:
      - status
    properties:
      status:
        title: Service Status
        description: Represents whether the service is in a healthy state for calls to be made to it.
        type: string
        enum: ["HEALTHY", "UNHEALTHY"]
      dependencies:
        title: Dependencies
        description: |
          Lists the health of the dependent components that the service may call. These being unhealthy may cause the Service Status to report as unhealthy.
        type: array
        items:
          type: object
          required:
            - name
            - status
          properties:
            name:
              title: Name
              description: Name of the component.
              type: string              
            status:
              title: Status
              description: Whether this component is in a healthy state.
              type: string
              enum: ["HEALTHY", "UNHEALTHY"]
  ##########################
  ##  WORKFLOWS
  ##########################
  existingWorkflows:
    type: object
    required:
      - workflows
    properties:
      totalHits:
        title: Total Hits
        type: integer
        format: int32
        description: |
          The total number of Workflows matching the request. Not all items may be returned due to paging options.
      workflows:
        type: array
        items:
          $ref: "#/definitions/existingWorkflow"
  existingWorkflow:
    type: object
    allOf:
    - $ref: "#/definitions/baseWorkflow"
    - type: object
      required:
        - id
      properties:
        id:
          title: ID
          type: integer
          description: The identifier for the Workflow.
          example: 1
          format: int64
  baseWorkflow:
    type: object
    required:
      - name
    properties:
      name:
        title: Name
        type: string
        description: The name of the Workflow.
      description:
        title: Description
        type: [string, "null"]
        description: A description giving context as to the purpose of the Workflow.
        default: ""
      notes:
        title: Notes
        type: [string, "null"]
        description: Can be used to record additional information about the Workflow that may not be suitable for display in the Description.
        default: ""
  ##########################
  ##  CLASSIFICATION RULES
  ##########################
  classificationRules:
    type: object
    required:
      - classificationRules
    properties:
      totalHits:
        type: integer
        title: Total Hits
        format: int32
        description: |
          The total number of Classification Rules matching the request. Not all items may be returned due to paging options.
      classificationRules:
        type: array
        items:
          $ref: "#/definitions/existingClassificationRule"
  existingClassificationRule:
    type: object
    allOf:
      - $ref: "#/definitions/baseClassificationRule" 
      - type: object
        required:
          - id
        properties:
          id:
            title: ID
            type: integer
            description: The identifier for the Classification Rule.
            example: 1
            format: int64
  baseClassificationRule:
    type: object
    required:
      - name
    properties:
      name:
        title: Name
        type: string
        description: The name of the Classification Rule.       
      description:
        title: Description
        type: [string, "null"]
        description: The description of the Classification Rule.
        default: ""
      priority:
        title: Priority
        type: integer
        description: Indicates the priority in the Workflow for this Classification Rule.
  ##############################
  ##  CLASSIFICATION
  ##############################
  existingClassifications:
    type: object
    required:
      - classifications
    properties:
      totalHits:
        title: Total Hits
        type: integer
        format: int32
        description: |
          The total number of Classifications matching the request. Not all items may be returned due to paging options.
      classifications:
        type: array
        items:
          $ref: "#/definitions/existingClassification"
  existingClassification:
    type: object
    allOf:
      - $ref: "#/definitions/baseClassification"
      - type: object
        required:
          - id
        properties:
          id:
            title: ID
            type: integer
            description: The identifier for the Classification.
            example: 1
            format: int64      
  baseClassification:
    type: object
    required:
      - name
      - additional
    properties:
      name:
        title: Name
        type: string
        description: The name of the Classification.       
      description:
        title: Description
        type: [string, "null"]
        description: The description of the Classification.
        default: ""
      classificationTarget:
        default: "ALL"
        description: |
          Determines the scope of classification evaluation, whether it only examines the root document passed for evaluation or considers child documents (and those children's children) passed with the root document also.
          -	ALL: Root and child documents (immediate and nested) will be considered during condition evaluation (Default).
          - CHILDREN: Only child documents (immediate and nested) will be considered during condition evaluation.
          - CONTAINER: Only the root document will be considered during condition evaluation.
          - CONTAINER_AND_IMMEDIATE_CHILDREN: Root document and immediate children will be considered during condition evaluation.
          - IMMEDIATE_CHILDREN: Only immediate child documents of the root document will be considered during condition evaluation.
        enum: [ "ALL", "CHILDREN", "CONTAINER", "CONTAINER_AND_IMMEDIATE_CHILDREN", "IMMEDIATE_CHILDREN" ]
        title: Classification Target
        type: string
      type:
        title: Type
        type: [string, "null"]
        description: Can be used to record additional information about the Classification not suitable for Description or Name. 
        default: ""
      additional:
        title: Additional Definition
        description: Describes the options set for this Classification appropriate to its type. See the condition type definitions in Policy API for properties that can be set on this object.
        type: object
        example:
          type: boolean
          operator: "and"
          children:     
          - name: Cat Condition
            additional:
              type: string
              order: 100
              field: "CONTENT"
              value: "cat"
              operator: "contains"
              notes: "CAT_CONDITION"
          - name: Count Condition
            additional:
              type: number
              order: 200
              field: "COUNT"
              value: 2
              operator: "eq"
  #################################
  ##  RULE CLASSIFICATION
  #################################
  existingRuleClassifications:
    type: object
    required:
      - ruleClassifications
    properties:
      totalHits:
        title: Total Hits
        type: integer
        format: int32
        description: |
          The total number of Rule Classifications matching the request. Not all items may be returned due to paging options.
      ruleClassifications:
        type: array
        items:
          $ref: "#/definitions/existingRuleClassification"
  existingRuleClassification:
    type: object
    allOf:
      - $ref: "#/definitions/baseRuleClassification"
      - type: object
        required:
          - id
        properties:
          id:
            title: ID
            type: integer
            description: The identifier for the Rule Classification.
            example: 1
            format: int64    
  baseRuleClassification:
    type: object
    required:
      - classificationId
    properties:
      classificationId:
        title: Classification ID
        type: integer
        format: int64
        description: ID of an existing Classification.
  #########################################
  ## RULE CONDITIONS
  #########################################
  existingConditions:
    type: object
    required:
      - conditions
    properties:
      totalHits:
        type: integer
        format: int32
        description: |
          The total number of Rule Conditions matching the request. Not all items may be returned due to paging options.
      conditions:
        type: array
        items:
          $ref: "#/definitions/existingCondition"
  existingCondition:
    type: object
    allOf:
      - $ref: "#/definitions/condition"  
      - type: object
        required:
          - id
        properties:
          id:
            type: integer
            description: The identifier for the Rule Condition.
            example: 1
            format: int64
  condition:
    type: object
    required:
      - additional
    properties:
      name:
        title: Name
        description: A name identifying the Rule Condition.
        type: string
      additional:
        title: Additional Definition
        description: Describes the options set for this Rule Condition appropriate to its type. See the condition type definitions for properties that can be set on this object. e.g. if using 'boolean' type use the properties available on that type.
        type: object
        example:
          type: boolean
          operator: "and"
          children:     
          - name: Cat Condition
            additional:
              type: string
              order: 100
              field: "CONTENT"
              value: "cat"
              operator: "contains"
              notes: "CAT_CONDITION"
          - name: Count Condition
            additional:
              type: number
              order: 200
              field: "COUNT"
              value: 2
              operator: "eq"
  ##############################
  ###  TERM LISTS
  ##############################
  existingTermLists:
    type: object
    required:
      - termLists
    properties:
      totalHits:
        type: integer
        format: int32
        description: |
          The total number of Term Lists matching the request. Not all items may be returned due to paging options.
      termLists:
        type: array
        items:
          $ref: "#/definitions/existingTermList"
  existingTermList:
    type: object
    allOf:
      - $ref: "#/definitions/baseTermList"
      - type: object
        required:
          - id
        properties:
          id:
            title: ID
            type: integer
            description: The identifier for the Term List.
            example: 1
            format: int64    
  baseTermList:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: The name of the Term List.
      description:
        type: [string, "null"]
        description: A description giving context as to the purpose of the Term List.
        default: ""
  existingTerms:
    type: object
    required:
      - terms
    properties:
      totalHits:
        type: integer
        format: int32
        description: |
          The total number of Terms matching the request. Not all items may be returned due to paging options.
      terms:
        type: array
        items:
          $ref: "#/definitions/existingTerm"
  newTerms:
    type: object
    required:
      - terms
    properties:
      terms:
        type: array
        items:
          $ref: "#/definitions/baseTerm"
      overwrite:
        description: Whether the update should replace existing terms or add to them. Defaults to false.
        type: boolean
        default: false
  termIds:
    type: object
    required:
      - termIds
    example: 
      termIds: [1, 2]
    properties:
      termIds:
        type: array
        items:
          title: Term IDs
          type: integer
          format: int64
  existingTerm:
    type: object
    allOf:
      - $ref: "#/definitions/baseTerm"
      - type: object
        required:
          - id
        properties:
          id:
            title: ID
            type: integer
            description: The identifier for the Term.
            example: 1
            format: int64    
  baseTerm:
    type: object
    required:
      - expression
      - type
    properties:
      expression:
        title: Expression
        type: string
        description: Expression that defines what is considered a match for this term.
        example: travel*@*.uk
      type:
        title: Type
        type: string
        enum: ["text", "regex"]
        description: The type of expression to be evaluated. Either 'text' or 'regex'.
        example: text
  ########################
  # CONDITIONS
  ########################
  conditionFieldDefinition:
    type: object
    allOf:
      - $ref: '#/definitions/conditionCommon'
      - type: object
        required:
        - field
        properties:
          field:
            type: string
            minLength: 1
            description: Name of the field to evaluate condition against.
            title: Field  
  conditionCommon:
    #the 'type' property describes the definition that inherits 'conditionCommon'
    discriminator: type
    type: object
    required:
      - type
    properties:      
      notes:              
        description: May be used to store additional description of the condition.
        title: Notes
        type: string
      order:
        type: integer
        description: The order that the condition is evaluated relative to other sibling conditions.
        title: Order      
      type:
        description: The type of a condition. Affects the behaviour of the condition in evaluation and the properties that can be set on the condition to control that behaviour. Set to the appropriate type for the condition.
        enum: [ "boolean", "regex", "date", "fragment", "lexicon", "termlist", "not", "number", "string", "exists", "text" ]
        title: Condition Type
        type: string
  #
  boolean_condition_additional:
    title: Boolean Condition
    description: A boolean operator that is applied to supplied child conditions. 'type' should be set to "boolean".
    type: object
    allOf:
      - $ref: "#/definitions/conditionCommon"
      - type: object
        required:
          - operator
        properties:
          operator:
            title: Operator
            description: Boolean operator to apply against child conditions e.g. logical AND or logical OR of children.
            type: string
            enum: ["and", "or"]
          children:
            description: Conditions the operator applies to.
            type: array
            items:
              $ref: "#/definitions/condition"              
    example:
      type: boolean
      operator: "and"
      children:     
      - name: Cat Condition
        additional:
          type: string
          order: 100
          field: "CONTENT"
          value: "cat"
          operator: "contains"
          notes: "CAT_CONDITION"
      - name: Count Condition
        additional:
          type: number
          order: 200
          field: "COUNT"
          value: 2
          operator: "eq"
  #
  regex_condition_additional:
    title: Regex Condition
    description: Describe a regular expression that items the condition is evaluated against should match. 'type' should be set to "regex".
    type: object
    allOf:
      - $ref: "#/definitions/conditionFieldDefinition"
      - type: object
        properties:
          value:
            title: Value
            description: The regular expression value to match with.
            type: string
            minLength: 1    
    example:
      type: "regex"
      field: "CONTENT"
      value: "Account [0-9]+"
  date_condition_additional:
    title: Date Condition
    description: Describes a date and how it should be compared against items. 'type' should be set to "date".
    allOf:
      - $ref: "#/definitions/conditionFieldDefinition"
      - type: object
        required:
          - value
          - operator
        properties:
          value:
            title: Value
            description: | 
              The date to match with. Supports the following formats;
                - A date in epoch post fixed with e: 1412935999e corresponds to 2014-10-10T10.13:19Z
                - A date in ISO8601 format: 2014-10-10T10.13:19Z
                - A date period in ISO8601 period format: P3Y6M4DT12H30M5S corresponds to 3 years, 6 months, 4 days, 12 hours, 30 minutes and 5 seconds
                - A day of the week - The following values may be truncated to Mon etc.: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                - A time of day in hh:mm or hh:mm:ss format: 12:00 or 14:30
            type: string
            minLength: 1
          operator:
            type: string
            enum: ["before", "after", "on"]
            description: The comparison type to perform on the date value against the field value of item being evaluated against condition.    
    example:
      type: "date"
      field: "RECEIVED"
      operator: "before"
      value: "P2Y"
  exists_condition_additional:
    title: Exists Condition
    description: The specified field must exist on the item being evaluated in order to match this condition. 'type' should be set to "exists".
    allOf:
      - $ref: "#/definitions/conditionFieldDefinition"
    example:
      type: "exists"
      field: "VITAL_FLAG"
  number_condition_additional:
    title: Number Condition
    description: Describes a number and how it should be compared against items. 'type' should be set to "number".
    allOf:
      - $ref: '#/definitions/conditionFieldDefinition'
      - type: object      
        required:
          - value
          - operator
        properties:
          value:
            title: Value
            type: integer
            format: int64
            description: The number value to compare item field value against.
            multipleOf: 1.0
          operator:
            title: Operator
            description: The comparison type to perform. 'gt' means 'Greater Than', 'lt' means 'Less Than' and 'eq' means 'Equals'.
            type: string
            enum: ["gt","lt","eq"]    
    example:
      type: "number"
      field: "SIZE"
      operator: "gt"
      value: 1000
  string_condition_additional:
    title: String Condition
    description: Describes a string value and how it should be compared against items. 'type' should be set to "string".
    allOf:
      - $ref: '#/definitions/conditionFieldDefinition'
      - type: object
        required:
          - value
          - operator
        properties:
          value:
            title: Value
            description: The string value to compare item field value against.
            type: string
          operator:
            title: Operator
            type: string
            description: The comparison type to perform on values.
            enum: ["is", "starts_with", "ends_with"]    
    example:
      type: "string"
      field: "AUTHOR"
      operator: "is"
      value: "John Smith"        
  #
  not_condition_additional:
    title: Not Condition
    description: Contains another Condition that must evaluate to 'false' for this Condition to be considered matched. 'type' should be set to "not".
    allOf:
      - $ref: "#/definitions/conditionCommon"
      - type: object
        required:
          - condition
        properties:
          condition:
            title: Condition
            type: object
            description: The condition that should evaluate to 'false'.
            allOf:
              - $ref: '#/definitions/condition'
    example: 
      type: "not"      
      condition:
        additional:
          type: "string"
          field: "AUTHOR"
          operator: "is"
          value: "John Smith"
  termlist_condition_additional:
    title: Term List Condition
    description: Refers to a Term List, by its ID, that the specified field should be checked against to see if it contains any of the specified terms. 'type' should be set to "termlist".
    allOf:
      - $ref: '#/definitions/conditionFieldDefinition'
      - type: object
        required:
          - value
        properties:
          value:
            title: Value
            description: The ID of the Term List to use.
            type: string    
    example:
      type: "termlist"
      field: "SENDER"
      value: "3"